package main

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"sync"

	"github.com/cockroachdb/docs/generate/extract"
	"github.com/spf13/cobra"
)

func main() {
	var (
		inputPath  string
		outputPath string
	)

	read := func() io.Reader {
		var r io.Reader = os.Stdin
		if inputPath != "" {
			f, err := os.Open(inputPath)
			if err != nil {
				log.Fatal(err)
			}
			defer f.Close()
			b, err := ioutil.ReadAll(f)
			if err != nil {
				log.Fatal(err)
			}
			r = bytes.NewReader(b)
		}
		return r
	}

	write := func(b []byte) {
		var w io.Writer = os.Stdout
		if outputPath != "" {
			f, err := os.Create(outputPath)
			if err != nil {
				log.Fatal(err)
			}
			defer f.Close()
			w = f
		}
		if _, err := w.Write(b); err != nil {
			log.Fatal(err)
		}
	}

	var addr string

	cmdBNF := &cobra.Command{
		Use:   "bnf",
		Short: "Write EBNF to stdout from sql.y",
		Run: func(cmd *cobra.Command, args []string) {
			b, err := runBNF(addr)
			if err != nil {
				log.Fatal(err)
			}
			write(b)
		},
	}

	cmdBNF.Flags().StringVar(&addr, "addr", "https://raw.githubusercontent.com/cockroachdb/cockroach/master/sql/parser/sql.y", "Location of sql.y file. Can also specify a local file.")

	var (
		topStmt string
		descend bool
		inline  []string
	)

	cmdParse := &cobra.Command{
		Use:   "reduce",
		Short: "Reduces and simplify an EBNF file to a smaller grammar",
		Long:  "Reads from stdin, writes to stdout.",
		Run: func(cmd *cobra.Command, args []string) {
			b, err := runParse(read(), inline, topStmt, descend)
			if err != nil {
				log.Fatal(err)
			}
			write(b)
		},
	}

	cmdParse.Flags().StringVar(&topStmt, "stmt", "stmt_block", "Name of top-level statement.")
	cmdParse.Flags().BoolVar(&descend, "descend", true, "Descend past -stmt.")
	cmdParse.Flags().StringSliceVar(&inline, "inline", nil, "List of statements to inline.")

	cmdRR := &cobra.Command{
		Use:   "rr",
		Short: "Generate railroad diagram from stdin, writes to stdout",
		Run: func(cmd *cobra.Command, args []string) {
			b, err := runRR(read())
			if err != nil {
				log.Fatal(err)
			}
			write(b)
		},
	}

	cmdBody := &cobra.Command{
		Use:   "body",
		Short: "Extract HTML <body> contents from stdin, writes to stdout",
		Run: func(cmd *cobra.Command, args []string) {
			s, err := extract.InnerTag(read(), "body")
			if err != nil {
				log.Fatal(err)
			}
			write([]byte(s))
		},
	}

	var (
		baseDir string
	)

	rootCmd := &cobra.Command{
		Use:   "generate",
		Short: "Generate SVG diagrams from SQL grammar",
		Long:  `With no arguments, generates SQL diagrams for all statements.`,
		Run: func(cmd *cobra.Command, args []string) {
			bnf, err := runBNF(addr)
			if err != nil {
				log.Fatal(err)
			}
			br := func() io.Reader {
				return bytes.NewReader(bnf)
			}
			var wg sync.WaitGroup
			wg.Add(1)
			go func() {
				defer wg.Done()
				g, err := runParse(br(), nil, "stmt_block", true)
				if err != nil {
					log.Fatal(err)
				}
				rr, err := runRR(bytes.NewReader(g))
				if err != nil {
					log.Fatal(err)
				}
				body, err := extract.InnerTag(bytes.NewReader(rr), "body")
				body = strings.SplitN(body, "<hr/>", 2)[0]
				body += `<p>generated by <a href="http://www.bottlecaps.de/rr/ui">Railroad Diagram Generator</a></p>`
				body = fmt.Sprintf("<div>%s</div>", body)
				if err != nil {
					log.Fatal(err)
				}
				if err := ioutil.WriteFile(filepath.Join(baseDir, "grammar.html"), []byte(body), 0644); err != nil {
					log.Fatal(err)
				}
			}()

			specs := map[string][]string{
				"alter_table_stmt":     []string{"alter_table_cmds", "alter_table_cmd", "column_def"},
				"create_database_stmt": nil,
				"create_index_stmt":    []string{"opt_unique", "opt_name", "index_params"},
				"create_table_stmt":    []string{"opt_table_elem_list", "table_elem_list", "table_elem"},
				"delete_stmt":          []string{"relation_expr_opt_alias", "where_clause", "returning_clause", "target_list", "target_elem"},
				"drop_stmt":            []string{"opt_drop_behavior", "any_name_list", "any_name", "qualified_name_list", "qualified_name"},
				"explain_stmt":         []string{"explainable_stmt", "explain_option_list"},
				"grant_stmt":           []string{"privileges", "privilege_list", "privilege", "privilege_target", "grantee_list"},
				"insert_stmt":          []string{"insert_target", "insert_rest", "returning_clause", "opt_on_conflict"},
				"revoke_stmt":          []string{"privileges", "privilege_list", "privilege", "privilege_target", "grantee_list"},
				"truncate_stmt":        []string{"opt_table", "relation_expr_list", "relation_expr", "opt_drop_behavior"},
				"update_stmt":          []string{"relation_expr_opt_alias", "set_clause_list", "set_clause", "single_set_clause", "multiple_set_clause", "ctext_row", "ctext_expr_list", "ctext_expr", "from_clause", "from_list", "where_clause", "returning_clause"},
			}

			for stmt, inline := range specs {
				wg.Add(1)
				go func(stmt string, inline []string) {
					defer wg.Done()
					g, err := runParse(br(), inline, stmt, false)
					if err != nil {
						log.Fatal(err)
					}
					rr, err := runRR(bytes.NewReader(g))
					if err != nil {
						log.Fatal(err)
					}
					body, err :=  extract.ExtractTag(bytes.NewReader(rr), "svg")
					if err != nil {
						log.Fatal(err)
					}
					body = strings.Replace(body, `<a xlink:href="#`, `<a xlink:href="sql-grammar.html#`, -1)
					name := strings.Replace(stmt, "_stmt", "", 1)
					if err := ioutil.WriteFile(filepath.Join(baseDir, fmt.Sprintf("%s.html", name)), []byte(body), 0644); err != nil {
						log.Fatal(err)
					}
				}(stmt, inline)
			}
			wg.Wait()
		},
	}

	rootCmd.Flags().StringVar(&addr, "addr", "https://raw.githubusercontent.com/cockroachdb/cockroach/master/sql/parser/sql.y", "Location of sql.y file. Can also specify a local file.")
	rootCmd.Flags().StringVar(&baseDir, "base", filepath.Join("..", "_includes", "sql", "diagrams"), "Base directory for html output.")

	rootCmd.AddCommand(cmdBNF, cmdParse, cmdRR, cmdBody)
	rootCmd.PersistentFlags().StringVar(&outputPath, "out", "", "Output path; stdout if empty.")
	rootCmd.PersistentFlags().StringVar(&inputPath, "in", "", "Input path; stdin if empty.")
	rootCmd.Execute()
}

func runBNF(addr string) ([]byte, error) {
	log.Printf("generate BNF: %s", addr)
	return extract.GenerateBNF(addr)
}

func runParse(r io.Reader, inline []string, topStmt string, descend bool) ([]byte, error) {
	log.Printf("parse: %s, inline: %s, descend: %v", topStmt, inline, descend)
	g, err := extract.ParseGrammar(r)
	if err != nil {
		log.Fatal(err)
	}
	if err := g.Inline(inline...); err != nil {
		log.Fatal(err)
	}
	return g.ExtractProduction(topStmt, descend)
}

func runRR(r io.Reader) ([]byte, error) {
	log.Printf("generate railroad diagrams")
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}
	html, err := extract.GenerateRR(b)
	if err != nil {
		return nil, err
	}
	s, err := extract.XHTMLtoHTML(bytes.NewReader(html))
	return []byte(s), err
}